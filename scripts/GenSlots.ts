import {writeFileSync, existsSync, mkdirSync, rmSync} from "fs";
import {join} from "path";
import {Hex, keccak256, stringToBytes} from "viem";

class GenSlots {
    private DIR = "contracts/generated/";
    private FILE_NAME: string;
    private cntFunc: number = 0;
    private content: string[] = [];

    constructor() {
        this.FILE_NAME = join(this.DIR, "slots.sol");
    }

    public run(): void {
        if (existsSync(this.FILE_NAME)) {
            rmSync(this.FILE_NAME);
        }
        mkdirSync(this.DIR, {recursive: true});

        this.writeLine("// SPDX-License-Identifier: BUSL-1.1");
        this.writeLine(
            "// This file is generated. Please do not edit this file manually.",
        );
        this.writeLine("//   ts-node ./scripts/GenSlots.ts");
        this.writeLine("pragma solidity ^0.8.28;");

        this.writeLine("");

        this.writeLine("// *_LOCATION are used as storage position");
        this.writeLine("// *_SLOT     are used as transient position");
        this.writeLine("// prettier-ignore");
        this.writeLine("library GeneratedStorageSlots {");

        this.addSlot(
            "pendle.authModule.authModuleStorage",
            "AUTH_MODULE_STORAGE_LOCATION",
        );
        this.addSlot(
            "pendle.router.EIP712Storage",
            "ROUTER_EIP712_STORAGE_LOCATION",
        );
        this.addSlot("pendle.router.account", "ROUTER_ACCOUNT_SLOT");
        this.addSlot(
            "pendle.router.tradeStorage",
            "ROUTER_TRADE_STORAGE_LOCATION",
        );

        this.addSlot("pendle.market.accState", "MARKET_ACC_STATE_LOCATION");

        this.addSlot("pendle.market.ctx", "MARKET_CTX_LOCATION");
        this.addSlot(
            "pendle.market.cacheMarkRate",
            "MARKET_CACHE_MARK_RATE_SLOT",
        );

        this.addSlot("pendle.orderBookStorage", "ORDERBOOK_STORAGE_LOCATION");
        this.addSlot(
            "pendle.coreOrder.isOrderRemove",
            "CORE_ORDER_IS_ORDER_REMOVE_SLOT",
        );

        this.addSlot("pendle.bot.base", "BOT_BASE_STORAGE_LOCATION");
        this.addSlot(
            "pendle.bot.botController",
            "BOT_CONTROLLER_STORAGE_LOCATION",
        );
        this.addSlot(
            "pendle.bot.cloSetterFacet",
            "CLO_SETTER_FACET_STORAGE_LOCATION",
        );
        this.addSlot(
            "pendle.bot.deleveragerFacet",
            "DELEVERAGER_FACET_STORAGE_LOCATION",
        );
        this.addSlot(
            "pendle.bot.orderCancellerFacet",
            "ORDER_CANCELLER_FACET_STORAGE_LOCATION",
        );
        this.addSlot("pendle.bot.pauserFacet", "PAUSER_FACET_STORAGE_LOCATION");
        this.addSlot(
            "pendle.bot.withdrawalPoliceFacet",
            "WITHDRAWAL_POLICE_FACET_STORAGE_LOCATION",
        );
        this.writeLine("}");

        // Write all content to file at once
        writeFileSync(this.FILE_NAME, this.content.join("\n") + "\n");
    }

    private addSlot(path: string, name: string): void {
        const slot = toHex(
            BigInt(
                keccak256(toHex(BigInt(keccak256(stringToBytes(path))) - 1n)),
            ) & ~BigInt(0xff),
        );

        if (this.cntFunc > 0) this.writeLine("");
        this.writeLine(
            `    // keccak256(abi.encode(uint256(keccak256("${path}")) - 1)) & ~bytes32(uint256(0xff))`,
        );
        this.writeLine(`    bytes32 internal constant ${name} = ${slot};`);

        this.cntFunc++;
    }

    private writeLine(line: string): void {
        this.content.push(line);
    }
}

function toHex(value: bigint): Hex {
    return `0x${value.toString(16).padStart(64, "0")}`;
}

// Run the script
const generator = new GenSlots();
generator.run();
