import fs from "fs";

export function indentLine(line: string, indent: string = "    "): string {
    return `${indent}${line}`;
}

export function* indentBlock(
    block: Iterable<string> | (() => Iterable<string>),
    indent: string = "    ",
): Generator<string> {
    if (typeof block == "function") block = block();
    for (const content of block) {
        for (const line of content.split("\n")) {
            if (line.trim().length > 0) yield indentLine(line, indent);
            else yield "";
        }
    }
}

export function* fileHeader(params: {
    solVer: string;
    runScript: string;
}): Generator<string> {
    const {solVer, runScript} = params;

    yield "// SPDX-License-Identifier: BUSL-1.1";
    yield "// This file is generated. Please do not edit this file manually.";
    yield `//   ${runScript}`;
    yield `pragma solidity ${solVer};`;
    yield "";
}

export function genCodeThenWriteToFile(
    filePath: string,
    contentGen: () => Iterable<string>,
): void {
    fs.writeFileSync(filePath, Array.from(contentGen()).join("\n") + "\n");
}
